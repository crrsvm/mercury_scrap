#COLECCIONES, CORRESPONDEN A ESTRUCTURAS DONDE ES POSIBLE ALMACENAR
#MÁS DE UN VALOR

#LISTAS, GUARDAN ELEMENTOS MANTENIENDO UN ORDEN. 
#PERMITEN ALMACENAR ELEMENTOS DE CUALQUIER TIPO.
numeros = [9, 6, 1, 3, 5]

#PARA ACCEDER A LOS ELEMENTOS DE LAS LISTAS SE UTILIZA EL ÍNDICE

#PARA AGREGAR ELEMENTOS A LA LISTA SE UTILIZA .append() DE LA SIGUIENTE FORMA:
#DICHO ELEMENTO SE AGREGA AL FINAL DE LA LISTA.
numeros.append(10)
numeros.append(13)

#PARA ELIMINAR ELEMENTOS DE UNA LISTA POR EL VALOR, SE UTILIZA .remove()
#ELIMINA SOLO LA PRIMERA OCURRENCIA DEL VALOR.
numeros.remove(6)

#PARA ELIMINAR ELEMENTOS DE UNA LISTA UTILIZANDO EL ÍNDICE SE UTILIZA .pop()
numeros.pop(2)

#PARA REEMPLAZAR ELEMENTOS, A TRAVÉS DE INDEXACIÓN.
#EN LA LÍNEA SIGUIENTE SE PLANTEA QUE DE LA LISTA numeros, el índice 0 sea reemplazado por el valor 23
numeros[0] = 23

#TAMBIÉN ES POSIBLE EDITAR EL VALOR QUE YA ESTÁ A TRAVÉS DE LOS SIGUIENTE:
numeros[0]  += 10 #EN ESTE CASO, SE LE ADICIONAN 10 AL VALOR QUE CONTIENE EL PRIMER ÍNDICE.

#leng INDICA EL TAMAÑO DE LA LISTA.
print(len(numeros))

#PARA OBTENER LA POSICIÓN DE UN ELEMENTO SE UTILIZA index DE LA SIGUIENTE FORMA:
print(numeros.index(5))

#PARA SABER SI UN ELEMENTO SE ENCUENTRA O NO EN UNA LISTA SE UTILIZA LO SIGUIENTE:
print (13 in numeros) #OBTENIENDO UN VALOR BOOLEANO.

#.sort() ORDENA LISTA EN ORDEN ASCENDENTE
#.reverse() INVIERTE EL ORDEN DE LA LISTA

#PARA RECORRER UNA LISTA O CASI CUALQUIER COLECCIÓN SE UTILIZA for
for elem in numeros: # elem es el nombre de variable que queremos que tome cada elemento que iremos recorriendo
    print (elem)

#TAMBIÉN ES POSIBLE RECORRER UNA LISTA POR ÍNDICES Y LUEGO, A TRAVÉS DEL ÍNDICE, ACCEDER AL VALOR.
for i in range(len(numeros)):
    print(numeros[i]) #RECORRER UNA LISTA A TRAVÉS DE LOS ÍNDICES.




##CADENAS DE TEXTO

#EN ESTE CASO AL UTILIZAR LA FUNCIÓN len, PODEMOS OBTENER EL LARGO DE LA CADENA.
cadena = 'Hola mundo'
print(len(cadena))

#TAMBIÉN ES POSIBLE INDEXAR LAS CADENAS YA QUE SE TRATAN COMO LISTAS. 
print (cadena[0])

#RECORRER CADENA CARACTER POR CARACTER
for c in cadena:
    print(c)

#FUNCIONES PARA TRANSFORMAR CADENAS

print(cadena.upper()) #TODA LA CADENA EN MAYÚSCULA
print(cadena.lower()) #TODA LA CADENA EN MINÚSCULA
print(cadena.capitalize()) #CAPITALIZA LA PRIMERA LETRA DE LA CADENA

#FUNCIONES CONDICIONALES SOBRE CADENAS
#DEVUELVEN VALORES BOOLEANOS
cadena = '  Hola mundo  '  
print(cadena.startswith('Hola')) #DEVUELVE TRUE SI LA CADENA COMIENZA CON 'Hola'
print(cadena.startswith('chao')) #DE LO CONTRARIO, DEVUELVE FALSE.

print(cadena.endswith('luna')) #DEVUELVE TRUE SI LA CADENA TERMINA CON 'luna'
print(cadena.endswith('mundo')) #DE LO CONTRARIO, DEVUELVE FALSE.

print(cadena.isalpha()) #DEVUELVE VERDADERO SI TODOS LOS CARÁCTERES SON LETRAS.
print(cadena.isdigit()) #DEVUELVE VERDADERO SI TODOS LOS CARÁCTERES SON DÍGITOS.
print(cadena.isalnum()) #DEVUELVE VERDADERO SI TODOS LOS CARÁCTERES SON ALFANUMÉRICOS.
print(cadena.isupper()) #DEVUELVE VERDADERO SI TODOS LOS CARÁCTERES ESTÁN EN MÁYUS.
print(cadena.islower()) #DEVUELVE VERDADERO SI TODOS LOS CARÁCTERES ESTÁN EN MÍNUS.
print(cadena.strip()) #ELIMINA LOS ESPACIOS AL PRINCIPIO Y AL FINAL D EUNA CADENA DE TEXTO.

#FUNCIÓN SPLIT TRANSFORMA CADENAS EN LISTAS Y DIVIDE LA CADENA SEGÚN EL PARÁMETRO 
#QUE SE LE PASE A LA FUNCIÓN. EN EL EJEMPLO EL PARÁMETRO ENTREGADO A LA FUNCIÓN ES LA COMA.
frutas = 'Durazno, Manzanas, Papaya'
print(frutas.split(','))

#FUNCIÓN JOIN UNE ELEMENTOS DE LISTA Y LOS CONVIERTE EN UNA CADENA DE CARACTERES UTILIZANDO EL PARÁMETRO
#ENTREGADO PARA UNIR DICHO ELEMENTOS.

lista = frutas.split(',')
cadena2 = ','.join(lista)
print(cadena2)


###TUPLAS###
#SON LISTAS INMUTABLES, ES DECIR, LUEGO DE ESTAR DEFINIDAS NO SE PUEDEN ALTERAR.
#EN VEZ DE DEFINIRSE CON [], SE DEFINEN CON ()

variable = [1, 5, 9]
#ES POSIBLE CONVERTIR UNA LISTA EN TUPLA EJECUTANDO LO SIGUIENTE:

print(type(variable)) #LA FUNCIÓN TYPE SE UTILIZÓ PARA CONFIRMAR EL TIPO DE VARIABLE, PREVIA CONVERSIÓN

tupla = tuple(variable) #SE CONVIERTE DEFINIENDO UNA VARIABLE, Y A LA LISTA, SE LE ANTEPONE 'tuple'


print(type(tupla))
















